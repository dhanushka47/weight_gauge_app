import 'dart:io';
import 'dart:typed_data';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:printing/printing.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/account.dart';
import 'package:pdf/pdf.dart';

class QuotationPreviewPage extends StatelessWidget {
  final String customerName;
  final String customerPhone;
  final String customerLocation;
  final String deliveryDate;
  final List<Map<String, dynamic>> items;

  const QuotationPreviewPage({
    super.key,
    required this.customerName,
    required this.customerPhone,
    required this.customerLocation,
    required this.deliveryDate,
    required this.items,
  });

  Future<Uint8List> _generatePdf() async {
    final pdf = pw.Document();
    final prefs = await SharedPreferences.getInstance();
    final bizName = prefs.getString('bizName') ?? '';
    final bizAddress = prefs.getString('bizAddress') ?? '';
    final bizContact = prefs.getString('bizContact') ?? '';
    final logoPath = prefs.getString('logoPath');
    final logo = (logoPath != null && File(logoPath).existsSync())
        ? File(logoPath).readAsBytesSync()
        : null;

    final List<BankAccount> accounts = (prefs.getStringList('bizAccounts') ?? [])
        .map((e) => BankAccount.fromJsonString(e))
        .toList();

    pdf.addPage(
      pw.Page(
        build: (context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Row(
              mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
              children: [
                if (logo != null)
                  pw.Image(pw.MemoryImage(logo), width: 80, height: 80),
                pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.end,
                  children: [
                    pw.Text(bizName, style: pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold)),
                    pw.Text(bizAddress, style: pw.TextStyle(fontSize: 10)),
                    pw.Text(bizContact, style: pw.TextStyle(fontSize: 10)),
                    pw.Text('Quotation', style: pw.TextStyle(fontSize: 12, fontWeight: pw.FontWeight.bold)),
                    pw.Text('ID: QT${DateTime.now().millisecondsSinceEpoch.toString().substring(8)}', style: pw.TextStyle(fontSize: 10)),
                  ],
                ),
              ],
            ),
            pw.SizedBox(height: 12),
            pw.Text('Customer: $customerName'),
            pw.Text('Phone: $customerPhone'),
            pw.Text('Location: $customerLocation'),
            pw.Text('Proposed Delivery Date: $deliveryDate', style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
            pw.SizedBox(height: 20),
            pw.Table.fromTextArray(
              headers: ['No', 'Item', 'Material', 'Infill %', 'Weight(g)', 'Price/g', 'Total'],
              data: List.generate(items.length, (index) {
                final item = items[index];
                final total = item['weight'] * item['price'];
                return [
                  '${index + 1}',
                  item['description'],
                  '${item['material'].type} - ${item['material'].color}',
                  '${item['infill']}%',
                  '${item['weight']}g',
                  'Rs. ${item['price'].toStringAsFixed(2)}',
                  'Rs. ${total.toStringAsFixed(2)}',
                ];
              }),
            ),
            pw.SizedBox(height: 10),
            pw.Align(
              alignment: pw.Alignment.centerRight,
              child: pw.Text(
                'Grand Total: Rs. ${(items.fold<double>(0, (sum, i) => sum + (i['weight'] * i['price']))).toStringAsFixed(2)}',
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 14),
              ),
            ),
            pw.SizedBox(height: 20),
            if (accounts.isNotEmpty) ...[
              pw.Text('You can make bank transfer to the following accounts and send the proof of slip:'),
              pw.SizedBox(height: 8),
              pw.Table.fromTextArray(
                headers: ['Bank', 'Branch', 'Account No'],
                data: accounts.map((acc) => [acc.bankName, acc.branch, acc.accountNumber]).toList(),
              ),
            ],
            pw.Spacer(),
            pw.Divider(),
            pw.Center(
              child: pw.Text(
                'Generated by All rights reserved Â©2025 brainwavetech.lk',
                style: pw.TextStyle(fontSize: 8, color: PdfColors.grey),
              ),
            ),
          ],
        ),
      ),
    );

    return pdf.save();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Quotation Preview'),
        actions: [
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: () async {
              final pdfData = await _generatePdf();
              await Printing.sharePdf(bytes: pdfData, filename: 'quotation.pdf');
            },
          ),
          IconButton(
            icon: const Icon(Icons.save),
            onPressed: () async {
              final pdfData = await _generatePdf();
              await Printing.layoutPdf(onLayout: (_) async => pdfData);
            },
          ),
          IconButton(
            icon: const Icon(Icons.delete),
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text("Quotation deleted")),
              );
            },
          ),
        ],
      ),
      body: PdfPreview(
        build: (format) => _generatePdf(),
        canChangePageFormat: false,
        canChangeOrientation: false,
        allowPrinting: false,
        allowSharing: false,
        pdfFileName: 'quotation.pdf',
      ),
    );
  }
}